#!/bin/bash
#
################################################################################
#
# MODULE:		r.avac
# AUTHOR(S):	Christophe Ancey (geoclaw avac lib) & Vincent Bain (grass gis frontend)
# PURPOSE:		Providing a frontend to geoCLAW computing library,
#				esp. applied to dense snow avalanche simulations
#				Mainly developed for toraval internal use
# COPYRIGHT:	(C) 2020 by the GRASS Development Team and Toraval-Vincent Bain
#				This program is free software under the GNU General
#				Public License (>=v2). Read the file COPYING that comes
#				with GRASS for details.

# VERSION:		3.1.5 20210828
#				Currently supports levels 1 & 2 AMR calculations
#				implements d0 modulation rule (based on SBG method)
#				implements snow hypsometric gradient depth definition
#				enhanced patching method, thus enabling dense grids processing
#				corrected the crappy AddSetrun file creation procedure
#				changed dt default value to 1 (prev. 20)
#
################################################################################


#%Module
#% description: this module is a frontend to geoCLAW computing library applied to dense snow avalanches simulations. For more information see http://www.clawpack.org/
#% keywords: raster, avac, snow avalanche, simulation, clawpack, geoclaw
#%End

#%option G_OPT_STRDS_OUTPUT
#% key: simul
#% required: yes
#% description: output simulation STRDS
#%end

#%option G_OPT_R_MAP
#% key: dem
#% required: yes
#% multiple: no
#% description: input elevation raster map
#%end


#%option G_OPT_V_MAP
#% key: za
#% required: yes
#% multiple: no
#% label: input starting area vector map
#% description: input starting area vector map
#% guidependency: depth
#%end
#%option G_OPT_DB_COLUMN
#% key: depth
#% type: string
#% required: no
#% description: depth column for starting area
#%End

#%option G_OPT_V_MAP
#% key: amr
#% required: no
#% multiple: no
#% label: input AMR zone map
#% description: input adaptive mesh refinement zone vector map
#%End

#%Option
#% key: dt
#% type: string
#% required: no
#% label: time increment
#% description: time series frame period in seconds
#% answer: 1
#%End

#%Option
#% key: t
#% type: string
#% required: no
#% label: simulation duration
#% description: simulation duration expressed in seconds
#% answer: 100
#%End

#%Option
#% key: rheology
#% type: string
#% required: no
#% label: type of rheology
#% description: type of rheology (0: Voellmy, 1: Coulomb)
#% answer: 0
#%End

#%Option
#% key: rho
#% type: string
#% required: no
#% answer: 300
#% label: snow density
#% description: snow density expressed in kg.m-3
#%End

#%Option
#% key: xi
#% type: string
#% required: no
#% answer: 1500
#% label: Voellmy xi
#% description: Voellmy xi value
#%End

#%Option
#% key: mu
#% type: string
#% required: no
#% answer: 0.15
#% label: Voellmy mu
#% description: Voellmy mu value
#%End

#%Option
#% key: grad
#% type: string
#% required: no
#% label: depth hypsometric gradient
#% description: depth hypsometric gradient expressed in depth,gradient,altitude (e.g. 1.8,0.03,1850). Overrides starting area depth values.
#%End

#%Option
#% key: vthres
#% type: string
#% required: no
#% answer: 0.05
#% label: velocity threshold
#% description: velocity threshold for code termination
#%End

#%Option
#% key: bslope
#% type: string
#% required: no
#% answer: 1.1
#% label: beta slope
#% description: beta slope
#%End

#%flag
#% key: m
#% description: compute max(h) and max(p) maps throughout simul strds
#%end

#%flag
#% key: r
#% description: reset existing simul strds
#%end

#%flag
#% key: c
#% description: run geoclaw 'make clobber'
#%end

#%flag
#% key: a
#% description: run r.avac in amnesiac mode (make sure -m flag is on)
#%end
#---------------------------------------------
# Get environnment
#---------------------------------------------
if  test "$GISBASE" = ""; then
	echo "You must be in GRASS GIS to run this program." 1>&2
	exit 1
fi
if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

GIS_DBASE=`g.gisenv get=GISDBASE`
GIS_LOCATION_NAME=`g.gisenv get=LOCATION_NAME`
GIS_MAPSET=`g.gisenv get=MAPSET`
GIS_MAP_PATH="${GIS_DBASE}/${GIS_LOCATION_NAME}/${GIS_MAPSET}"
autodepth=1

#---------------------------------------------
# Check inputs
#---------------------------------------------
ctrl=`t.list where=name=\"$GIS_OPT_simul"_"h\" --q`
if [ $GIS_FLAG_r -eq 0 -a "$ctrl" != "" ] ; then
	g.message -w "strds '$GIS_OPT_simul' already exists, use -r flag to overwrite"
	exit 1
elif [ $GIS_FLAG_r -eq 1 -a "$ctrl" != "" ] ; then
	#---------------------------------------------
	# remove previous strds
	#---------------------------------------------
	if [ $ctrl ] ; then
		g.message "removing existing strds '$GIS_OPT_simul' and associated maps"
		t.remove -rf inputs="$GIS_OPT_simul"_h
		t.remove -rf inputs="$GIS_OPT_simul"_p
	fi
	#---------------------------------------------
	# remove previous max maps
	#---------------------------------------------
	eval `g.findfile element=cell file="$GIS_OPT_simul""_h_max"`
	if [ "$file" ] ; then
		g.remove -f type=rast name="$GIS_OPT_simul""_h_max"
		fi
	eval `g.findfile element=cell file="$GIS_OPT_simul""_p_max"`
	if [ "$file" ] ; then
		g.remove -f type=rast name="$GIS_OPT_simul""_p_max"
	fi
fi

if [ $GIS_FLAG_a -eq 1 -a $GIS_FLAG_m -eq 0 ] ; then
	g.message -w "amnesiac mode: -a flag without -m flag is useless!"
	exit 1
fi

eval `g.findfile element=cell file="$GIS_OPT_dem"`
if [ ! "$file" ] ; then
	g.message -e "Raster map '$GIS_OPT_dem' not found"
	exit 1
fi

eval `g.findfile element=vector file="$GIS_OPT_za"`
if [ ! "$file" ] ; then
	g.message -e "Vector map '$GIS_OPT_za' not found"
	exit 1
fi

if [ "$GIS_OPT_amr" ] ; then
	amrcheck=`v.category in=${GIS_OPT_amr} option=print 2>/dev/null`
	if [ ! "${amrcheck}" ] ; then
		g.message -e "Vector map $GIS_OPT_amr : no category found!"
		exit 1
	else
		amr_level=$amrcheck
	fi
else
	amr_level=1
fi

tablecheck=`v.db.connect -c map=${GIS_OPT_za} 2>/dev/null`
if [ ! "${tablecheck}" ] ; then
	g.message -e "Vector map $GIS_OPT_za is not connected to any database table!"
	exit 1
else
	table=`v.db.connect -g map=$GIS_OPT_za | awk 'BEGIN{FS="|"} {print $2}'`
	if [ "$GIS_OPT_depth" ] ; then
		attributecheck=`db.columns table=$table | grep  -w $GIS_OPT_depth`
		if [ ! "${attributecheck}" -a ! "$GIS_OPT_grad" ] ; then
			g.message -e "attribute $GIS_OPT_depth not found. See depth option or provide grad values."
			exit 1
		fi
		autodepth=0
	fi
fi

dt=`echo $GIS_OPT_dt | awk '{print $0*1}'`

if [ `echo "$GIS_OPT_t % $GIS_OPT_dt" | bc` != "0" ] ; then
	incrementcheck=`echo "$GIS_OPT_t % $dt" | bc`
	duration=`echo "scale=0; $GIS_OPT_t + $dt - $incrementcheck" | bc`
	g.message -w "simulation duration changed from '$GIS_OPT_t' to '$duration' so as to satisfy integer number of iterations."
else
	duration=$GIS_OPT_t
fi
iter=`echo "scale=0;$duration/$dt"| bc`

if [ "$GIS_OPT_grad" ] ; then
	# retrieve grad
	defifs=$IFS
	IFS=','
	read -a gradarray <<< "$GIS_OPT_grad"
	if [ ${#gradarray[@]} -eq 3 ] ; then
		g.message -w "$GIS_OPT_grad values found, overriding potential $GIS_OPT_za depth data"
		# check input numeric validity
		regex='^[0-9]+([.][0-9]+)?$|^\s+[0-9]+([.][0-9]+)?$'
		for i in ${gradarray[@]};do
			if ! [[ $i =~ $regex ]] ; then
				g.message -e "error formatting grad string. See grad option."
				exit 1
			fi
		done
		# extract depth, gradient, altitude (+ remove eventual leading spaces)
		d0h=${gradarray[0]// }
		d0grad=${gradarray[1]// }
		d0alt=${gradarray[2]// }
	else
		g.message -e "error formatting grad string. See grad option."
		exit 1
	fi
	IFS=$defifs
else
	if [ ! "$GIS_OPT_depth" ] ; then
		g.message -e "neither grad string nor depth attribute provided. Can't proceed."
		exit 1
	fi
fi

#---------------------------------------------
# Check for Clawpack and avac
#---------------------------------------------
if [ ! -x "`echo $CLAW`" ] ; then
	g.message -e "failed to detect Clawpack environment, install Clawpack first."
	exit 1
fi
if [ ! -x "`echo $CLAW/geoclaw/examples/avac/`" ] ; then
	g.message -e "failed to detect avac environment, install avac first."
	exit 1
fi


#---------------------------------------------
# Check for awk
#---------------------------------------------
if ! echo test | awk '{print $0}' > /dev/null 2>&1; then
	g.message -e "`basename $0`: awk required, please install awk/gawk first" 1>&2
	exit 1
fi


#---------------------------------------------
# save command line
#---------------------------------------------
if [ "$1" != "@ARGS_PARSED@" ] ; then
    CMDLINE=`basename "$0"`
    for arg in "$@" ; do
        CMDLINE="$CMDLINE \"$arg\""
    done
    export CMDLINE
fi


#---------------------------------------------
# Functions handling user break
#---------------------------------------------
Cleanup()
{
	#----
	#cleaning temporary directory
	#----
	if [ -d "$GIS_MAP_PATH/.tmp/avac" ]; then
		rm -r "$GIS_MAP_PATH"/.tmp/avac/
	fi
	#----
	#cleaning temporary region settings
	#----
	g.region region=$regionbackup
	g.remove -f type=region name=$regionbackup --quiet
	#----
	#removing potential temporary mask (!eventhough previously set!)
	#----
	r.mask -r 2>/dev/null
	g.message -w "Warning ! r.avac removes any MASK previously set"
	g.remove -f type=rast name=$rinitial0,$masque,$topoclip,$penteclip,$rinitial1 2>/dev/null
}

Cleanexit()
{
	g.message -w "User break !"
	Cleanup
	exit 1
}
trap "Cleanexit" 2 3 15


#---------------------------------------------
# setting up a working directory
#---------------------------------------------
if [ ! -d "$GIS_MAP_PATH/.tmp" ] ; then
	mkdir "$GIS_MAP_PATH/.tmp"
fi

if [ ! -d "$GIS_MAP_PATH/.tmp/avac" ] ; then
	mkdir "$GIS_MAP_PATH/.tmp/avac"
fi
cd "$GIS_MAP_PATH/.tmp/avac"


#---------------------------------------------
# import avac primitive files
#---------------------------------------------
cp $CLAW/geoclaw/examples/avac/* .


#---------------------------------------------
# get current region and proj4 settings
#---------------------------------------------
eval `g.region -g`
regionbackup="avac_$$"
g.region save=$regionbackup
proj=`g.proj -jf`

#---------------------------------------------
# removing potential mask, and warning user
#---------------------------------------------
r.mask -r 2>/dev/null
g.message -w "Warning ! r.avac removes any MASK previously set"


#---------------------------------------------
# feed voellmy.data
#---------------------------------------------
echo "# voellmy parameters set by r.avac ">voellmy.data
echo \ >>voellmy.data
echo "$GIS_OPT_RHO =: snow_density ">>voellmy.data
echo "$GIS_OPT_XI =: xi ">>voellmy.data
echo "$GIS_OPT_MU =: mu ">>voellmy.data
echo "$GIS_OPT_VTHRES =: velocity threshold ">>voellmy.data
echo "$GIS_OPT_BSLOPE =: beta_slope ">>voellmy.data
echo "$GIS_OPT_RHEOLOGY =: coulomb ">>voellmy.data
echo \ >>voellmy.data


#---------------------------------------------
# feed AddSetrun.py...
#---------------------------------------------

	#----
	# duration and extent
	#----
echo "# voellmy parameters set by r.avac ">AddSetrun.py
echo \ >>AddSetrun.py
echo "xmin = $w">>AddSetrun.py
echo "xmax = $e">>AddSetrun.py
echo "ymin = $s">>AddSetrun.py
echo "ymax = $n">>AddSetrun.py
echo "nx = $cols">>AddSetrun.py
echo "ny = $rows">>AddSetrun.py
echo "nsim = $iter">>AddSetrun.py
echo "dt_init = 0.02">>AddSetrun.py
echo "tmax = $duration">>AddSetrun.py
echo "cfl_desired = 0.5">>AddSetrun.py
echo "nb_max_iter = 10000">>AddSetrun.py
echo "nodatavalue = 0">>AddSetrun.py
echo "DryWetLimit = 0.01">>AddSetrun.py



	#----
	# AMR settings
	#----

echo "refinement = $amr_level">>AddSetrun.py

if [ "$GIS_OPT_amr" ] ; then
	eval `v.info -g ${GIS_OPT_amr}`

	echo "amrxmin = $west">>AddSetrun.py
	echo "amrxmax = $east">>AddSetrun.py
	echo "amrymin = $south">>AddSetrun.py
	echo "amrymax = $north">>AddSetrun.py
else
	echo "amrxmin = $w">>AddSetrun.py
	echo "amrxmax = $e">>AddSetrun.py
	echo "amrymin = $s">>AddSetrun.py
	echo "amrymax = $n">>AddSetrun.py
fi


#---------------------------------------------
# setting up input data i.e. initial conditions and topo
#---------------------------------------------
rinitial0="avacrinit0_$$"

# two methods depending on autodepth bool
if [ "$autodepth" -eq 0 ] ; then
	# turning za input into raster, considering GIS_OPT_depth attribute
	v.to.rast input=$GIS_OPT_za type=area output=$rinitial0 use=attr attribute_column=$GIS_OPT_depth
else
	# turning za input into raster, first filled with ones
	v.to.rast input=$GIS_OPT_za type=area output=$rinitial0 use=val
fi

# evaluating slope parameter within starting area
masque="avacmask_$$"
r.grow in=$rinitial0 out=$masque radius=6.01

topoclip="avactopoclip_$$"
r.mapcalc expression="$topoclip=$GIS_OPT_dem" --o

penteclip="avacpenteclip_$$"
# had to give up using r.param.scale, sometimes producing erratic slope map...
# r.param.scale input=$topoclip output=$penteclip size=5 method=slope
r.slope.aspect elevation=$topoclip slope=$penteclip
r.mask rast=$rinitial0 --o

# apply SBG d0 rule
rinitial1="avacrinit1_$$"
theta=30.0
nu=0.2



# again, two methods depending on autodepth bool
if [ "$autodepth" -eq 0 ] ; then
	# considering GIS_OPT_depth attribute, apply a simple slope correction
	r.mapcalc expression="$rinitial1=if($penteclip < 25,$rinitial0 * cos($theta) * (sin($theta) - $nu * cos($theta)) / (sin(25) - $nu * cos(25)),$rinitial0 * cos($theta) * (sin($theta) - $nu * cos($theta)) / (sin($penteclip) - $nu * cos($penteclip)))"
else
	# feeding initial depth from $GIS_OPT_grad values (SBG d0 method), then apply slope correction
	#r.mapcalc expression="$rinitial1=if($penteclip < 25,( $d0h + ( $topoclip - $d0alt ) * $d0grad / 100 ) * cos($theta) * (sin($theta) - $nu * cos($theta)) / (sin(25) - $nu * cos(25)),( $d0h + ( $topoclip - $d0alt ) * $d0grad / 100 ) *  cos($theta) * (sin($theta) - $nu * cos($theta)) / (sin($penteclip) - $nu * cos($penteclip)))"
	r.mapcalc expression="$rinitial1=if($penteclip < 25,( $d0h + ( $topoclip - $d0alt ) * $d0grad / 100 )  * (sin($theta) - $nu * cos($theta)) / (sin(25) - $nu * cos(25)),( $d0h + ( $topoclip - $d0alt ) * $d0grad / 100 ) * (sin($theta) - $nu * cos($theta)) / (sin($penteclip) - $nu * cos($penteclip)))"

fi

r.mask -r
r.null map=$rinitial1 null=0

#---------------------------------------------
# export initial condition and topo
#---------------------------------------------

# export initial condition to xyz file, rounding to 1 decimal
r.out.xyz input=$rinitial1 output=initial0.xyz separator=space
cat initial0.xyz | awk '{printf"%.1f %.1f %.1f\n",$1,$2,$3}'>initial.xyz

# cleaning up temporary maps and files
rm initial0.xyz
g.remove -f type=rast name=$rinitial0,$masque,$topoclip,$penteclip,$rinitial1

# export topo to asc file
g.region grow=2
r.out.gdal -f --overwrite input=$GIS_OPT_dem output=topo0.asc format=AAIGrid type=Float64 nodata=-9999
head -n6 topo0.asc >topo.asc
tail -n +7 topo0.asc  | sed 's/ /\n/g' >>topo.asc
rm topo0.asc
g.region region=$regionbackup


#---------------------------------------------
# run GeoClaw code
#---------------------------------------------
g.message "running geoclaw AVAC code..."

if [ "$GIS_FLAG_c" -eq 1 ] ; then
	make clobber
fi
make clean
make .output


#---------------------------------------------
# dispatching GeoClaw output
#---------------------------------------------
cd _output

g.message "splitting AVAC output..."

fortsplit() { in=$1; i=0; awk '/grid/{next}/AMR/{amr=$1;i++}{print>FILENAME"_"sprintf("%02d",amr)"_"sprintf("%03d",i)".split"}' $in; }
export -f fortsplit
parallel fortsplit {} ::: fort.q*

g.message "formating GRASS ASCII grids..."

gridasc_h() { in=$1; out=$2; awk ' NR==2{cols=$1} NR==3{rows=$1} NR==4{west=$1} NR==5{south=$1} NR==6{dx=$1} NR==7{dy=$1} END{printf "north: %.2f\nsouth: %.2f\neast: %.2f\nwest: %.2f\nrows: %.0f\ncols:%.0f\n",south+rows*dy,south,west+cols*dx,west,rows,cols}' $in > $out.h.asc;tail -n +9 $in | sed 's/^[ ]*$//g' | awk 'BEGIN{RS="";FS="\n";ORS="\n";OFS=" "}{a[i++]=$0} END {$1=$1;while(i--) print a[i]}' | awk '{printf "%.4f\n",$1}' >> $out.h.asc; }

export -f gridasc_h
# preparing a file list to feed parallel
find -type f -name "*.split" | sed 's|^./||'| sort > listsplit
# running parallel
g.message "... height files"
parallel gridasc_h {} {.} :::: listsplit

gridasc_p() { awk ' NR==2{cols=$1} NR==3{rows=$1} NR==4{west=$1} NR==5{south=$1} NR==6{dx=$1} NR==7{dy=$1} END{printf "north: %.2f\nsouth: %.2f\neast: %.2f\nwest: %.2f\nrows: %.0f\ncols: %.0f\n",south+rows*dy,south,west+cols*dx,west,rows,cols}' $1 >$2.p.asc;tail -n +9 $1 | sed 's/^[ ]*$//g' | awk 'BEGIN{RS="";FS="\n";ORS="\n";OFS=" "}{a[i++]=$0} END {$1=$1;while(i--) print a[i]}' | awk -v rho=$3 -v epsilon=1.0E-4 '{($1 > epsilon )?press=(0.5 * rho * ( ( $3 / $1 )^2 + ( $2 /$1 )^2 ) / 1000 ):press="0.0";printf "%.4f\n",press}' >> $2.p.asc; }

export -f gridasc_p
# running parallel
g.message "... pressure files"
parallel gridasc_p {} {.} $GIS_OPT_rho :::: listsplit


#---------------------------------------------
# importing h and p raster maps
#---------------------------------------------


if [ -f ringdalh.txt ]; then
	rm ringdalh.txt
	touch ringdalh.txt
fi

g.message "importing source maps within GRASS GIS :"
fn_vrt() { ls $1*.$2.asc>$1.$2.txt; gdalbuildvrt -a_srs "$4" -input_file_list $1.$2.txt $1.$2.vrt; echo "in=$1.$2.vrt out=$2.$3_`echo $1 | cut -c7-`" >>ringdal.txt; }
#`echo $1 | cut -c7-` stands for parallel dynamic substitution {:number1:number2} which is buggy in debian buster
export -f fn_vrt
# preparing a file list to feed parallel
find -type f -name "*.asc" | sed 's|^./||'| awk '{print substr($0,1,length($0)-13)}'|sort|uniq > listasc
# running parallel for h an p types
for k in {h,p}; do
	g.message "importing $k parameter map..."
	if [ -f ringdal.txt ]; then
	rm ringdal.txt
	touch ringdal.txt
	fi
	parallel fn_vrt :::: listasc ::: $k  ::: $GIS_OPT_simul ::: "$proj"
	xargs -a "ringdal.txt" -n 2 -P 128 r.in.gdal --o --quiet
done

outres=`echo "scale=2;$nsres / 2" | bc`
g.region -a res=$outres

#---------------------------------------------
# packing source maps in time series
#---------------------------------------------

g.message "creating and feeding time series..."

t.create output="$GIS_OPT_simul"_h type=strds temporaltype=relative title="AVAC GeoCLAW simulation " description="snow height"
t.create output="$GIS_OPT_simul"_p type=strds temporaltype=relative title="AVAC GeoCLAW simulation " description="pressure"
listh=`g.list rast sep=comma pattern=h.$GIS_OPT_simul*`
listp=`g.list rast sep=comma pattern=p.$GIS_OPT_simul*`

if [ `echo $GIS_OPT_dt | awk '{print $0 % 1}'` != "0" ] ; then
	dtround=`awk "BEGIN {printf \"%.0f\n\", $GIS_OPT_dt}"`
	if [ "$dtround" -eq "0" ] ;then
		let $((dtround++))
	fi
	g.message -w "forced to set STRDS time increment to $dtround second(s), while actual time increment is $GIS_OPT_dt. "
	t.register --o input="$GIS_OPT_simul"_h type=raster start=0 unit=seconds increment="$dtround" maps=$listh --quiet
	t.register --o input="$GIS_OPT_simul"_p type=raster start=0 unit=seconds increment="$dtround" maps=$listp --quiet
else
	t.register --o input="$GIS_OPT_simul"_h type=raster start=0 unit=seconds increment="$dt" maps=$listh --quiet
	t.register --o input="$GIS_OPT_simul"_p type=raster start=0 unit=seconds increment="$dt" maps=$listp --quiet
fi

#---------------------------------------------
# Tweaking color tables
#---------------------------------------------
# t.rast.colors --q input="$GIS_OPT_simul"_h color=blues
# t.rast.colors --q input="$GIS_OPT_simul"_p color=reds
t.rast.colors --q input="$GIS_OPT_simul"_h rules=~/h_toraval.file
t.rast.colors --q input="$GIS_OPT_simul"_p rules=~/p_toraval.file

#---------------------------------------------
# Testing m flag
#---------------------------------------------
if [ "$GIS_FLAG_m" -eq 1 ] ; then
	# compute max(h)
	output="$GIS_OPT_simul"_h_max
	t.rast.series --overwrite input="$GIS_OPT_simul"_h method=maximum where="start_time>=0" output=$output
	g.message "max(h) raster map saved to $output"
	# r.colors map=$output color=blues
	r.colors map=$output rules=~/h_toraval.file
	r.support map=$output history="r.avac run with mu=$GIS_OPT_MU, xi=$GIS_OPT_XI, rho=$GIS_OPT_RHO, grad=$GIS_OPT_GRAD"

	# compute max(p)
	output="$GIS_OPT_simul"_p_max
	t.rast.series --overwrite input="$GIS_OPT_simul"_p method=maximum where="start_time>=0" output=$output
	g.message "max(p) raster map saved to $output"
	# r.colors map=$output color=reds
	r.colors map=$output rules=~/p_toraval.file
	r.support map=$output history="r.avac run with mu=$GIS_OPT_MU, xi=$GIS_OPT_XI, rho=$GIS_OPT_RHO, grad=$GIS_OPT_GRAD"
fi

#---------------------------------------------
# Testing a flag
#---------------------------------------------
if [ "$GIS_FLAG_a" -eq 1 ] ; then
	# purge time series, just keep max(h) and max(p) raster maps
	t.remove -rdf inputs="$GIS_OPT_simul"_h
	t.remove -rdf inputs="$GIS_OPT_simul"_p
fi

#---------------------------------------------
# regular exit
#---------------------------------------------
g.region region=$regionbackup

Cleanup
exit 0
